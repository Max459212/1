{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3034a4fe-86b0-482c-b8ef-3545ddb1c1d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import numpy as np\n",
    "from scipy import linalg\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "95e44257-5465-4c69-a9a6-4ee825073652",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.array([\n",
    "    [4, 0.86, 0.3],\n",
    "    [0.05, 2, 0.14],\n",
    "    [0.07, 0.5, -3]\n",
    "])\n",
    "b = np.array([3, 4, -2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "23ecc1eb-e2e7-4f24-9f72-4b2a703aff1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def printResult(function, A, b):\n",
    "    solution = function(A,b)\n",
    "    print(f\"Р С–С€РµРЅРЅСЏ: {solution}\")  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33145c22-45db-41a0-96f6-8f3535673daa",
   "metadata": {},
   "source": [
    "### LU-СЂРѕР·РєР»Р°Рґ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2feb78bb-99bd-4a4b-82bb-c93ea053a71a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def LU_dec(A):\n",
    "    n = A.shape[0]\n",
    "    U = A.copy()\n",
    "    L = np.identity(n)\n",
    "    for k in range(n):\n",
    "        for i in range(k+1, n):\n",
    "            if U[i,k] != 0.0: \n",
    "                lam = U[i,k]/U[k,k]\n",
    "                U[i,k:n] = U[i,k:n] - lam*U[k,k:n]\n",
    "                L[i,k] = lam\n",
    "    return L, U\n",
    "\n",
    "def forward_substitution(L, b):\n",
    "    n = L.shape[0]\n",
    "    y = np.zeros(n);\n",
    "    y[0] = b[0]/L[0, 0]\n",
    "    for i in range(1, n):\n",
    "        y[i] = (b[i] - np.dot(L[i,:i], y[:i]))/L[i,i]\n",
    "    return y\n",
    "\n",
    "def back_substitution(U, y):\n",
    "    n = U.shape[0]\n",
    "    x = np.zeros(n)\n",
    "    x[-1] = y[-1]/U[-1, -1]\n",
    "    for i in range(n-2, -1, -1):\n",
    "        x[i] = (y[i] - np.dot(U[i,i:], x[i:]))/U[i,i]\n",
    "    return x \n",
    "\n",
    "def LUsolve(A,b):\n",
    "    L, U = LU_dec(A)\n",
    "    \n",
    "    y = forward_substitution(L, b)\n",
    "    \n",
    "    return back_substitution(U, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "639907d7-e346-4e35-b6f0-26cebc47f641",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Р С–С€РµРЅРЅСЏ: [0.26185139 1.9239137  0.99342882]\n",
      "Р—Р° РґРѕРїРѕРјРѕРіРѕСЋ РґРѕР±СѓС‚РєР° РѕР±РµСЂРЅРµРЅРѕС— РјР°С‚СЂРёС†С– РЅР° СЃС‚РѕРІР±РµС†СЊ РІС–Р»СЊРЅРёС… С‡Р»РµРЅС–РІ:  [0.26185139 1.9239137  0.99342882]\n",
      "Р§Рё СЃРїС–РІРїР°РґР°СЋС‚СЊ СЂРѕР·РІ'СЏР·РєРё РЅР° 100% ?:  True\n"
     ]
    }
   ],
   "source": [
    "x = LUsolve(A, b)\n",
    "printResult(LUsolve,A,b)\n",
    "print(\"Р—Р° РґРѕРїРѕРјРѕРіРѕСЋ РґРѕР±СѓС‚РєР° РѕР±РµСЂРЅРµРЅРѕС— РјР°С‚СЂРёС†С– РЅР° СЃС‚РѕРІР±РµС†СЊ РІС–Р»СЊРЅРёС… С‡Р»РµРЅС–РІ: \", np.dot(linalg.inv(A), b))  # РїРѕСЂС–РІРЅСЋС”РјРѕ Р· СЂРѕР·РІ'СЏР·РєРѕРј  scipy\n",
    "print(\"Р§Рё СЃРїС–РІРїР°РґР°СЋС‚СЊ СЂРѕР·РІ'СЏР·РєРё РЅР° 100% ?: \", np.allclose(np.dot(linalg.inv(A), b), x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2502f4e7-9951-4a39-8abf-75972f797672",
   "metadata": {},
   "source": [
    "#### Р§Р°СЃ РІРёРєРѕРЅР°РЅРЅСЏ LU-РґРµРєРѕРјРїРѕР·РёС†С–С—"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "adb07294-98c4-4e76-aab4-a2cb3546cc47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22.6 Ојs В± 714 ns per loop (mean В± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "LUsolve(A, b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20f7c2ea-438d-49a1-b908-3d1e9826074c",
   "metadata": {},
   "source": [
    "### Р”РµРєРѕРјРїРѕР·РёС†С–СЏ РҐРѕР»РµС†СЊРєРѕРіРѕ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b74dd2b7-21c1-4ccf-8ce6-81278d4381c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cholesky(A):\n",
    "    \n",
    "    n = A.shape[0]\n",
    "    \n",
    "    L = np.zeros((n, n), dtype=np.double)\n",
    "    \n",
    "    for k in range(n):\n",
    "        \n",
    "        L[k, k] = np.sqrt(A[k, k] - np.sum(L[k, :] ** 2))\n",
    "        \n",
    "        L[(k+1):, k] = (A[(k+1):, k] - np.dot(L[(k+1):, :], L[:, k])) / L[k, k]\n",
    "    \n",
    "    return L\n",
    "\n",
    "def choleski_solve(A,b):\n",
    "\n",
    "    L = cholesky(A)\n",
    "    \n",
    "    y = forward_substitution(L, b)\n",
    "    \n",
    "    return back_substitution(L.T, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526c3e0a-6783-4efd-be13-3516d0c4b35e",
   "metadata": {},
   "source": [
    "#### Р§Рё С” РјР°С‚СЂРёС†СЏ СЃРёРјРµС‚СЂРёС‡РЅРѕСЋ С‚Р° РїРѕР·РёС‚РёРІРЅРѕ РІРёР·РЅР°С‡РµРЅРѕСЋ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1b324a3a-c48b-4057-ba48-5e5fb31cfe2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_pos_def(A):\n",
    "    if np.allclose(A, A.T):\n",
    "        try:\n",
    "            np.linalg.cholesky(A)\n",
    "            return True\n",
    "        except np.linalg.LinAlgError:\n",
    "            return False\n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f029ad09-c5ec-40b4-8146-6726e8fddd86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_pos_def(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c735f3fe-fe03-445e-ae5a-76af0ec73530",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Р С–С€РµРЅРЅСЏ: [nan nan nan]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dobru\\AppData\\Local\\Temp\\ipykernel_11472\\36473304.py:9: RuntimeWarning: invalid value encountered in sqrt\n",
      "  L[k, k] = np.sqrt(A[k, k] - np.sum(L[k, :] ** 2))\n"
     ]
    }
   ],
   "source": [
    "printResult(choleski_solve,A,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6e92d6a4-68a4-40e9-8534-c22f3cccefcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dobru\\AppData\\Local\\Temp\\ipykernel_11472\\36473304.py:9: RuntimeWarning: invalid value encountered in sqrt\n",
      "  L[k, k] = np.sqrt(A[k, k] - np.sum(L[k, :] ** 2))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "41.5 Ојs В± 379 ns per loop (mean В± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "choleski_solve(A, b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d284841c-a868-47de-ac69-7b770d514fa3",
   "metadata": {},
   "source": [
    "### РњРµС‚РѕРґ РЇРєРѕР±С– "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6a93a4f8-342b-4f3a-b0ac-cc4d90f6c77b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def jacobi(A, b, tolerance=1e-10, max_iterations=10000):\n",
    "    x = np.zeros_like(b, dtype=np.double)\n",
    "    residuals = [] \n",
    "    T = A - np.diag(np.diagonal(A))\n",
    "    for k in range(max_iterations):\n",
    "        x_old  = x.copy()\n",
    "        x[:] = (b - np.dot(T, x)) / np.diagonal(A)\n",
    "        res = np.linalg.norm(x - x_old, ord=np.inf) / np.linalg.norm(x, ord=np.inf)\n",
    "        residuals.append(res) \n",
    "        if res < tolerance:\n",
    "            break\n",
    "    return x, residuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d4a0a846-e4c6-43a7-ab34-3c2964d9adfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Р С–С€РµРЅРЅСЏ: (array([0.26185139, 1.9239137 , 0.99342882]), [1.0, 0.2481154426017661, 0.011499734799379777, 0.002265085993638025, 0.00021340604216330076, 2.2439742876333673e-05, 2.5367569654712735e-06, 1.229859647213186e-07, 3.4378089865152336e-08, 2.6725730373295933e-09, 3.4583656867589703e-10, 3.6051839758428865e-11])\n",
      "Р—Р° РґРѕРїРѕРјРѕРіРѕСЋ РґРѕР±СѓС‚РєР° РѕР±РµСЂРЅРµРЅРѕС— РјР°С‚СЂРёС†С– РЅР° СЃС‚РѕРІР±РµС†СЊ РІС–Р»СЊРЅРёС… С‡Р»РµРЅС–РІ:  [0.26185139 1.9239137  0.99342882]\n",
      "Р§Рё СЃРїС–РІРїР°РґР°СЋС‚СЊ СЂРѕР·РІ'СЏР·РєРё РЅР° 100% ?:  True\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, res = jacobi(A, b)\n",
    "plt.plot(res) #  РЈ РЅР°РїС–РІР»РѕРіР°СЂРёС„РјС–С‡РЅРѕРјСѓ РјР°СЃС€С‚Р°Р±С–: Р·Р°Р»РµР¶РЅС–СЃС‚СЊ Р·Р°Р»РёС€РєС–РІ РІС–Рґ С‡РёСЃР»Р° С–С‚РµСЂР°С†С–Р№ \n",
    "plt.yscale('log')\n",
    "printResult(jacobi,A,b)\n",
    "print(\"Р—Р° РґРѕРїРѕРјРѕРіРѕСЋ РґРѕР±СѓС‚РєР° РѕР±РµСЂРЅРµРЅРѕС— РјР°С‚СЂРёС†С– РЅР° СЃС‚РѕРІР±РµС†СЊ РІС–Р»СЊРЅРёС… С‡Р»РµРЅС–РІ: \", np.dot(linalg.inv(A), b))  # РїРѕСЂС–РІРЅСЋС”РјРѕ Р· СЂРѕР·РІ'СЏР·РєРѕРј  scipy\n",
    "print(\"Р§Рё СЃРїС–РІРїР°РґР°СЋС‚СЊ СЂРѕР·РІ'СЏР·РєРё РЅР° 100% ?: \", np.allclose(np.dot(linalg.inv(A), b), x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58477c32-0c85-4d17-8686-d930c907aa9b",
   "metadata": {},
   "source": [
    "#### Р§Р°СЃ РІРёРєРѕРЅР°РЅРЅСЏ РјРµС‚РѕРґСѓ РЇРєРѕР±С–"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d76d031b-0718-4249-8d96-bd91ee18fe8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "164 Ојs В± 1.5 Ојs per loop (mean В± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "jacobi(A, b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06bf9d83-579d-4e91-9df5-89162b15111b",
   "metadata": {},
   "source": [
    "### РњРµС‚РѕРґ Р“Р°СѓСЃР°-Р—РµР№РґРµР»СЏ (Gauss-Seidel's method)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4de6803c-0697-43db-8cc2-8987a05a7521",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gauss_seidel(A, b, tolerance=1e-10, max_iterations=10000):\n",
    "    x = np.zeros_like(b, dtype=np.double)\n",
    "    residuals = []\n",
    "    for k in range(max_iterations):\n",
    "        x_old  = x.copy()\n",
    "        for i in range(A.shape[0]):\n",
    "            x[i] = (b[i] - np.dot(A[i,:i], x[:i]) - np.dot(A[i,(i+1):], x_old[(i+1):])) / A[i ,i]\n",
    "        res = np.linalg.norm(x - x_old, ord=np.inf) / np.linalg.norm(x, ord=np.inf)\n",
    "        residuals.append(res)\n",
    "        if res < tolerance: \n",
    "            break\n",
    "    return x, residuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9a84acdb-edf8-4fa2-8a29-2649a2a327cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Р С–С€РµРЅРЅСЏ: (array([0.26185139, 1.9239137 , 0.99342882]), [1.0, 0.2611026632577293, 0.007368781786870802, 0.00014859267501478185, 3.7362064035456116e-06, 8.1058539886088e-08, 1.9385461073502393e-09, 4.3448426546516704e-11])\n",
      "Р—Р° РґРѕРїРѕРјРѕРіРѕСЋ РґРѕР±СѓС‚РєР° РѕР±РµСЂРЅРµРЅРѕС— РјР°С‚СЂРёС†С– РЅР° СЃС‚РѕРІР±РµС†СЊ РІС–Р»СЊРЅРёС… С‡Р»РµРЅС–РІ:  [0.26185139 1.9239137  0.99342882]\n",
      "Р§Рё СЃРїС–РІРїР°РґР°СЋС‚СЊ СЂРѕР·РІ'СЏР·РєРё РЅР° 100% ?:  True\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, res = gauss_seidel(A, b)\n",
    "plt.plot(res) #  РЈ РЅР°РїС–РІР»РѕРіР°СЂРёС„РјС–С‡РЅРѕРјСѓ РјР°СЃС€С‚Р°Р±С–: Р·Р°Р»РµР¶РЅС–СЃС‚СЊ Р·Р°Р»РёС€РєС–РІ РІС–Рґ С‡РёСЃР»Р° С–С‚РµСЂР°С†С–Р№ \n",
    "plt.yscale('log')\n",
    "printResult(gauss_seidel, A, b)\n",
    "print(\"Р—Р° РґРѕРїРѕРјРѕРіРѕСЋ РґРѕР±СѓС‚РєР° РѕР±РµСЂРЅРµРЅРѕС— РјР°С‚СЂРёС†С– РЅР° СЃС‚РѕРІР±РµС†СЊ РІС–Р»СЊРЅРёС… С‡Р»РµРЅС–РІ: \", np.dot(linalg.inv(A), b))  # РїРѕСЂС–РІРЅСЋС”РјРѕ Р· СЂРѕР·РІ'СЏР·РєРѕРј  scipy\n",
    "print(\"Р§Рё СЃРїС–РІРїР°РґР°СЋС‚СЊ СЂРѕР·РІ'СЏР·РєРё РЅР° 100% ?: \", np.allclose(np.dot(linalg.inv(A), b), x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeef8b23-3763-44b3-a464-f325d273ccf2",
   "metadata": {},
   "source": [
    "#### Р§Р°СЃ РІРёРєРѕРЅР°РЅРЅСЏ РјРµС‚РѕРґСѓ Р“Р°СѓСЃР°-Р—РµР№РґРµР»СЏ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c0779248-19ef-45b1-92c6-7114c512a08b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "151 Ојs В± 3 Ојs per loop (mean В± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "gauss_seidel(A, b)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
