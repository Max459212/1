{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c1d29832-d4fa-4287-b57d-1a5f008453be",
   "metadata": {},
   "source": [
    "# Р›Р°Р±РѕСЂР°С‚РѕСЂРЅР° СЂРѕР±РѕС‚Р° в„– 7\n",
    "## Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ С‚Р° РІР»Р°СЃРЅС– РІРµРєС‚РѕСЂРё РјР°С‚СЂРёС†С–\n",
    "#### 1. РњРµС‚РѕРґ Р›Р°РІРµСЂ'С”-Р¤Р°РґРґС”С”РІР°\n",
    "#### 2. РњРµС‚РѕРґ СЃС‚РµРїРµРЅС–РІ\n",
    "#### 3. РњРµС‚РѕРґ РѕР±РµСЂС‚Р°РЅСЊ\n",
    "#### 4. Р’РёРєРѕСЂРёСЃС‚Р°РЅРЅСЏ С„СѓРЅРєС†С–Р№ NumPy\n",
    "## Р‘Р°РєСѓРЅ РњР°РєСЃРёРј Р†-22 РІР°СЂС–Р°РЅС‚ 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b71e13d1-85fe-498c-86ec-f0cf971b6822",
   "metadata": {},
   "source": [
    "### РњРµС‚РѕРґ Р›Р°РІРµСЂ'С”-Р¤Р°РґРґС”С”РІР°"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "778313fb-9f44-4441-becd-0093fc5b8b2b",
   "metadata": {},
   "source": [
    "Р”.Рљ. Р¤Р°РґС”С”РІРёРј Р±СѓР»Рѕ Р·Р°РїСЂРѕРїРѕРЅРѕРІР°РЅРѕ РІРёРґРѕР·РјС–РЅР° РјРµС‚РѕРґСѓ РЈ.Р–.Р–. Р›РµРІРµСЂСЊРµ. Р—Р°РІРґСЏРєРё С†СЊРѕРјСѓ Р·'СЏРІРёР»Р°СЃСЏ РјРѕР¶Р»РёРІС–СЃС‚СЊ РѕС‚СЂРёРјР°РЅРЅСЏ РІР»Р°СЃРЅРёС… РІРµРєС‚РѕСЂС–РІ РІРёС…С–РґРЅРѕС— РјР°С‚СЂРёС†С–. РЈ РјРµС‚РѕРґС– Р¤Р°РґРґРµРµРІР° С…Р°СЂР°РєС‚РµСЂРЅРѕСЋ СЂРёСЃРѕСЋ С” РѕР±С‡РёСЃР»РµРЅРЅСЏ СЃР»С–РґС–РІ РјР°С‚СЂРёС†СЊ. РџРѕРїСѓС‚РЅРѕ С†РёРј РјРµС‚РѕРґРѕРј РѕР±С‡РёСЃР»СЋС”С‚СЊСЃСЏ РѕР±РµСЂРЅРµРЅР° РјР°С‚СЂРёС†СЏ, СЏРєС‰Рѕ С–СЃРЅСѓС”, С–, РєРѕР»Рё РІСЃС– РІР»Р°СЃРЅС– С‡РёСЃР»Р° СЂС–Р·РЅС–, РїСЂРѕСЃС‚РёРј РґРѕРґР°С‚РєРѕРІРёРј Р°Р»РіРѕСЂРёС‚РјРѕРј РѕР±С‡РёСЃР»СЋСЋС‚СЊСЃСЏ РІР»Р°СЃРЅС– СЃС‚РѕРІРїС†С–.\n",
    "Р”Р°РЅРёР№ РјРµС‚РѕРґ РґРѕР·РІРѕР»СЏС” Р·РЅР°Р№С‚Рё РЅРµ С‚С–Р»СЊРєРё РєРѕРµС„С–С†С–С”РЅС‚Рё С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёС‡РЅРѕРіРѕ РјРЅРѕРіРѕС‡Р»РµРЅР°, Р° Р№ РґР°С” РјРѕР¶Р»РёРІС–СЃС‚СЊ РІРёР·РЅР°С‡РёС‚Рё РѕР±РµСЂРЅРµРЅСѓ РјР°С‚СЂРёС†СЋ С– РІР»Р°СЃРЅС– РІРµРєС‚РѕСЂРё РјР°С‚СЂРёС†С–."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3563657-4445-4f6d-9352-2c32056f187e",
   "metadata": {},
   "source": [
    "РћСЃРЅРѕРІРЅР° С–РґРµСЏ РјРµС‚РѕРґСѓ Р¤Р°РґС”С”РІР° РїРѕР»СЏРіР°С” РІ С‚РѕРјСѓ, С‰Рѕ Р·Р°РјС–СЃС‚СЊ РїРѕСЃР»С–РґРѕРІРЅРѕСЃС‚С– Рђ, ${Рђ}^{2}$, ...,${Рђ}^{n}$  СЏРєСѓ РјРё РІС–РґС€СѓРєСѓРІР°Р»Рё РІРёРєРѕСЂРёСЃС‚РѕРІСѓСЋС‡Рё Р°Р»РіРѕСЂРёС‚Рј РјРµС‚РѕРґСѓ Р›РµРІРµСЂ'С”, РѕР±С‡РёСЃР»СЋСЋС‚СЊ РїРѕСЃР»С–РґРѕРІРЅС–СЃС‚СЊ $Рђ_1$,$Рђ_2$,...,$Рђ_n$, РїРѕР±СѓРґРѕРІР°РЅСѓ Р·Р° РЅР°СЃС‚СѓРїРЅРёРјРё С„РѕСЂРјСѓР»Р°РјРё:\n",
    "    \\begin{eqnarray*}\n",
    "      A_{1} &=& A_{2} &   & SpA_{1}=q_1 &   & B_1 &=& A_1-q_1E \\\\\n",
    "      \\vdots &  &  &  & \\vdots &  &  & \\vdots \\\\\n",
    "      A_{n} &=& AB_{n-1} &   & \\frac{SpA_{n}}{n-1}=q_n &   & B_n &=& A_n-q_nE\n",
    "    \\end{eqnarray*}\n",
    "РґРµ E вЂ” РѕРґРёРЅРёС‡РЅР° РјР°С‚СЂРёС†СЏ С‚РѕРіРѕ Р¶ СЃР°РјРѕРіРѕ РїРѕСЂСЏРґРєСѓ, С‰Рѕ С– РјР°С‚СЂРёС†СЏ A; $SpРђ_1$,$SpРђ_2$,...,$SpРђ_n$, СЃР»С–РґРё РјР°С‚СЂРёС†СЊ $Рђ_1$,$Рђ_2$,...,$Рђ_n$, РІС–РґРїРѕРІС–РґРЅРѕ.\n",
    "\n",
    "\n",
    "РџС–СЃР»СЏ С‡РѕРіРѕ, РєРѕРµС„С–С†С–С”РЅС‚Рё С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёС‡РЅРѕРіРѕ РјРЅРѕРіРѕС‡Р»РµРЅР°, РѕР±РµСЂРЅРµРЅСѓРјР°С‚СЂРёС†СЋ С‚Р° РІР»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ РІРёР·РЅР°С‡Р°СЋС‚СЊ Р·Р° РЅР°СЃС‚СѓРїРЅРёРјРё С„РѕСЂРјСѓР»Р°РјРё:$$ $$\n",
    "1) $\\sigma_1 = q_1, \\dots, \\sigma_n = q_n$ (2)\n",
    "$$ $$\n",
    "2) РЇРєС‰Рѕ Рђ - РЅРµРІРёСЂРѕРґР¶РµРЅР° РјР°С‚СЂРёС†СЏ $A^{-1}=\\frac{B_{n-1}}{\\sigma_n}$\n",
    "$$ $$\n",
    "3) РљРѕР¶РµРЅ СЃС‚РѕРІРїРµС†СЊ РјР°С‚СЂРёС†С– $R_i=\\lambda^{n-1}_{i}E+\\lambda^{n-2}_{i}B_i+\\dots+\\lambda_{i}B_{n-2}+B_{n-1}$, РјС–СЃС‚РёС‚СЊ РµР»РµРјРµРЅС‚Рё РІР»Р°СЃРЅРѕРіРѕ РІРµРєС‚РѕСЂР°, С‰Рѕ РЅР°Р»РµР¶РёС‚СЊ РІР»Р°СЃРЅРѕРјСѓ Р·РЅР°С‡РµРЅРЅСЋ $\\lambda_i$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0faf759f-7177-410e-917d-475a6002bab1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def faddeev_leverrier(A):\n",
    "    '''\n",
    "    Р”Р°РЅРѕ РјР°С‚СЂРёС†СЋ A(n С… n). РџРѕРІРµСЂС‚Р°С”РјРѕ  РєРѕРµС„С–С†С–С”РЅС‚Рё \n",
    "    С—С—  С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёС‡РЅРѕРіРѕ РїРѕР»С–РЅРѕРјР°\n",
    "\n",
    "    P(x) ^= det(xI - A) = p_0 * x^n + p_1 * x^(n - 1) + ... + a_n\n",
    "\n",
    "    Р‘РµСЂСѓС‡Рё РґРѕ СѓРІР°РіРё РІР»Р°СЃС‚РёРІС–СЃС‚СЊ  P(x) С‰Рѕ p_0 = 1, p_n = det(A)\n",
    "\n",
    "    РњРё РїРѕРІРµСЂС‚Р°С”РјРѕ СЃРїРёСЃРѕРє p = [p_0, p_1, ..., p_n]\n",
    "    '''\n",
    "    A = np.array(A) #Ensure we have a numpy array\n",
    "    n = A.shape[0]\n",
    "    assert A.shape[1] == n, 'РњР°С‚СЂРёС†СЏ РїРѕРІРёРЅРЅР° Р±СѓС‚Рё РєРІР°РґСЂР°С‚РЅРѕСЋ!'\n",
    "\n",
    "    a = np.array([1.])\n",
    "    Ak = np.array(A)\n",
    "    for k in range(1, n + 1):\n",
    "        ak = -Ak.trace() / k\n",
    "        a = np.append(a, ak)\n",
    "        Ak += np.diag(np.repeat(ak, n))\n",
    "        Ak = np.dot(A, Ak)\n",
    "    return a\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3f5eee6b-f24e-42a3-9920-2e21b47d54a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "РњР°С‚СЂРёС†СЏ = \n",
      "[[ 1. -2.  2.]\n",
      " [ 1.  2.  1.]\n",
      " [ 2.  0.  3.]]\n",
      "p(i) =\n",
      "[ 1. -6.  9. -0.]\n"
     ]
    }
   ],
   "source": [
    "# Р’РёР·РЅР°С‡Р°С”РјРѕ РјР°С‚СЂРёС†СЋ A СЂРѕР·РјС–СЂРѕРј 3x3\n",
    "A = np.array([[1., -2., 2.], \n",
    "              [1., 2., 1.], \n",
    "              [2., 0., 3]])\n",
    "\n",
    "# Р’РёРІРѕРґРёРјРѕ РјР°С‚СЂРёС†СЋ A\n",
    "print(\"РњР°С‚СЂРёС†СЏ = \")\n",
    "print(A)\n",
    "\n",
    "# Р’РёРєР»РёРєР°С”РјРѕ С„СѓРЅРєС†С–СЋ faddeev_leverrier РґР»СЏ РѕР±С‡РёСЃР»РµРЅРЅСЏ С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёС‡РЅРѕРіРѕ РїРѕР»С–РЅР° РјР°С‚СЂРёС†С– A\n",
    "# С– РІРёРІРѕРґРёРјРѕ СЂРµР·СѓР»СЊС‚Р°С‚Рё\n",
    "print(\"p(i) =\")\n",
    "print(faddeev_leverrier(A))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "882f9b07-6583-401f-b6a4-2c3bf0d9682e",
   "metadata": {},
   "source": [
    "### РњРµС‚РѕРґ СЃС‚РµРїРµРЅС–РІ"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "652e9fa8-d002-4d51-9334-e8fe9f5bc848",
   "metadata": {},
   "source": [
    "Р”Р»СЏ Р·Р°РґР°РЅР°С— РјР°С‚СЂРёС†С– $Рђ$, Р·РЅР°Р№С‚Рё РјР°РєСЃРёРјР°Р»СЊРЅРµ РїРѕ РјРѕРґСѓР»СЋ РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ Р· С‚РѕС‡РЅС–СЃС‚СЋ РґРѕ 0.1.\n",
    "\n",
    "Р’ СЏРєРѕСЃС‚С– РїРѕС‡Р°С‚РєРѕРІРѕРіРѕ РЅР°Р±Р»РёР¶РµРЅРЅСЏ РґР»СЏ РІР»Р°СЃРЅРѕРіРѕ РІРµРєС‚РѕСЂР° РІС–Р·СЊРјРµРјРѕ $(1,1,1,1)^{T}$=$y^{(0)}$. Р”Р°Р»С–, СЃРєРѕСЂРёСЃС‚Р°РІС€РёСЃСЊ С„РѕСЂРјСѓР»РѕСЋ (2) СЂРµР°Р»С–Р·СѓС”РјРѕ С–С‚РµСЂР°С†С–Р№РЅРёР№ РїСЂРѕС†РµСЃ СЃС‚РµРїРµРЅРµРІРѕРіРѕ РјРµС‚РѕРґСѓ.\n",
    "\n",
    "РўР°РєРёРј С‡РёРЅРѕРј, РѕС‚СЂРёРјР°РЅРµ РЅР° Рї'СЏС‚С–Р№ С–С‚РµСЂР°С†С–С— Р·РЅР°С‡РµРЅРЅСЏ $Р›_1^{(n)}$ Р·Р°РґРѕРІРѕР»СЊРЅСЏС” Р·Р°РґР°РЅС–Р№ С‚РѕС‡РЅРѕСЃС‚С– С– РјРѕР¶Рµ Р±СѓС‚Рё РІР·СЏС‚Рѕ РІ СЏРєРѕСЃС‚С– РЅР°Р±Р»РёР¶РµРЅРѕРіРѕ Р·РЅР°С‡РµРЅРЅСЏ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9d0a099f-2b95-4119-8dc5-36c7010c1bf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "РњР°С‚СЂРёС†СЏ = \n",
      "[[ 1. -2.  2.]\n",
      " [ 1.  2.  1.]\n",
      " [ 2.  0.  3.]]\n"
     ]
    }
   ],
   "source": [
    "a = np.array([[2.1, 1., 1.1], \n",
    "              [1., 2.6, 1.1], \n",
    "              [1.1, 1.1, 3.1]])\n",
    "print(\"РњР°С‚СЂРёС†СЏ = \")\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d3da4e2e-4def-4e36-835c-0263d268e4ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "РњР°С‚СЂРёС†СЏ = \n",
      "[[2.1 1.  1.1]\n",
      " [1.  2.6 1.1]\n",
      " [1.1 1.1 3.1]]\n",
      "Р’РІРµРґС–С‚СЊ РїРѕС‡Р°С‚РєРѕРІС– Р·РЅР°С‡РµРЅРЅСЏ РІРµРєС‚РѕСЂР°: \n",
      "\n",
      "РљР РћРљ 1\n",
      "----------\n",
      "Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ = 5.3000\n",
      "Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: \n",
      "0.792\t\n",
      "0.887\t\n",
      "1.000\t\n",
      "РџРѕС…РёР±РєР°=4.300000000000001\n",
      "\n",
      "РљР РћРљ 2\n",
      "----------\n",
      "Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ = 4.9472\n",
      "Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: \n",
      "0.738\t\n",
      "0.849\t\n",
      "1.000\t\n",
      "РџРѕС…РёР±РєР°=0.35283018867924554\n",
      "\n",
      "РљР РћРљ 3\n",
      "----------\n",
      "Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ = 4.8452\n",
      "Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: \n",
      "0.722\t\n",
      "0.835\t\n",
      "1.000\t\n",
      "РџРѕС…РёР±РєР°=0.10193716448627743\n",
      "\n",
      "РљР РћРљ 4\n",
      "----------\n",
      "Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ = 4.8124\n",
      "Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: \n",
      "0.717\t\n",
      "0.830\t\n",
      "1.000\t\n",
      "РџРѕС…РёР±РєР°=0.03283910768994236\n",
      "\n",
      "РљР РћРљ 5\n",
      "----------\n",
      "Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ = 4.8013\n",
      "Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: \n",
      "0.716\t\n",
      "0.828\t\n",
      "1.000\t\n",
      "РџРѕС…РёР±РєР°=0.01105612997855765\n",
      "\n",
      "РљР РћРљ 6\n",
      "----------\n",
      "Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ = 4.7975\n",
      "Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: \n",
      "0.715\t\n",
      "0.827\t\n",
      "1.000\t\n",
      "РџРѕС…РёР±РєР°=0.003807827619544568\n"
     ]
    }
   ],
   "source": [
    "# РњРµС‚РѕРґ СЃС‚РµРїРµРЅС–РІ (Power Method) РґР»СЏ Р·РЅР°С…РѕРґР¶РµРЅРЅСЏ \n",
    "# РЅР°Р№Р±С–Р»СЊС€РѕРіРѕ РІР»Р°СЃРЅРѕРіРѕ Р·РЅР°С‡РµРЅРЅСЏ С– РІС–РґРїРѕРІС–РґРЅРѕРіРѕ РІР»Р°СЃРЅРѕРіРѕ РІРµРєС‚РѕСЂР°\n",
    "\n",
    "import sys\n",
    "n = np.ndim(a)+1\n",
    "A = np.array([[2.1, 1., 1.1], [1., 2.6, 1.1], [1.1, 1.1, 3.1]])\n",
    "print(\"РњР°С‚СЂРёС†СЏ = \")\n",
    "print(A)\n",
    "\n",
    "# Р·Р°РґР°С”РјРѕ numpy РјР°СЃРёРІ СЂРѕР·РјС–СЂРѕРј n x 1  \n",
    "# С‚Р° С–РЅС–С†С–Р°Р»С–Р·СѓС”РјРѕ СЃРїРѕС‡Р°С‚РєСѓ Р№РѕРіРѕ РЅСѓР»СЏРјРё\n",
    "x = np.zeros((n))\n",
    "\n",
    "# Р’РІРѕРґРёРјРѕ РїРѕС‡Р°С‚РєРѕРІС– Р·РЅР°С‡РµРЅРЅСЏ РІРµРєС‚РѕСЂР°\n",
    "print('Р’РІРµРґС–С‚СЊ РїРѕС‡Р°С‚РєРѕРІС– Р·РЅР°С‡РµРЅРЅСЏ РІРµРєС‚РѕСЂР°: ')\n",
    "for i in range(n):\n",
    "    x[i] = 1#float(input( 'x['+str(i)+']='))\n",
    "\n",
    "# Р—Р°РґР°С”РјРѕ С‚РѕС‡РЅС–СЃС‚СЊ РѕР±С‡РёСЃР»РµРЅСЊ\n",
    "tolerable_error = 0.01\n",
    "\n",
    "# Р—Р°РґР°С”РјРѕ РјР°РєСЃРёРјР°Р»СЊРЅСѓ РєС–Р»СЊРєС–СЃС‚СЊ С–С‚РµСЂР°С†С–Р№ \n",
    "max_iteration = 20\n",
    "\n",
    "# Р†РјРїР»РµРјРµРЅС‚Р°С†С–СЏ РјРµС‚РѕРґСѓ \n",
    "lambda_old = 1.0\n",
    "condition =  True\n",
    "step = 1\n",
    "while condition:\n",
    "    # РџРµСЂРµРјРЅРѕР¶РёРјРѕ a С‚Р° x\n",
    "    x = np.matmul(a,x)\n",
    "    \n",
    "    # Р—РЅР°С…РѕРґРёРјРѕ РЅРѕРІС– РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ С‚Р° РІР»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ\n",
    "    lambda_new = max(abs(x))\n",
    "    \n",
    "    x = x/lambda_new\n",
    "    \n",
    "    # Р’РёРІРѕРґРёРјРѕ РїСЂРѕРјС–Р¶РЅС– Р·РЅР°С‡РµРЅРЅСЏ\n",
    "    print('\\nРљР РћРљ %d' %(step))\n",
    "    print('----------')\n",
    "    print('Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ = %0.4f' %(lambda_new))\n",
    "    print('Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: ')\n",
    "    for i in range(n):\n",
    "        print('%0.3f\\t' % (x[i]))\n",
    "    \n",
    "    # РџРµСЂРµРІС–СЂСЏРјРѕ РєС–Р»СЊРєС–СЃС‚СЊ С–С‚РµСЂР°С†С–Р№\n",
    "    step = step + 1\n",
    "    if step > max_iteration:\n",
    "        print('РџСЂРѕС†РµСЃ РЅРµ Р·Р±С–РіР°С”С‚СЊСЃСЏ Р·Р° РІРёР±СЂР°РЅРµ С‡РёСЃР»Рѕ С–С‚РЅСЂР°С†С–Р№!')\n",
    "        break\n",
    "    # Р РѕР·СЂР°С…СѓРЅРѕРє РїРѕС…РёР±РєРё\n",
    "    error = abs(lambda_new - lambda_old)\n",
    "    print('РџРѕС…РёР±РєР°='+ str(error))\n",
    "    lambda_old = lambda_new\n",
    "    condition = error > tolerable_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a7f0334-7b7e-44c8-8da2-d0986ba68e44",
   "metadata": {},
   "source": [
    "## РњРµС‚РѕРґ РѕР±РµСЂС‚Р°РЅСЊ"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2451f6c0-6419-40b2-9e1b-78c5d59220d5",
   "metadata": {},
   "source": [
    "РњРµС‚РѕРґ РѕР±РµСЂС‚Р°РЅСЊ вЂ” РїРѕС€РёСЂРµРЅРёР№ С–С‚РµСЂР°С†С–Р№РЅРёР№ РјРµС‚РѕРґ СЂРѕР·РІ'СЏР·СѓРІР°РЅРЅСЏ РїРѕРІРЅРѕС— Р°Р»РіРµР±СЂР°С—С‡РЅРѕС— РїСЂРѕР±Р»РµРјРё РІР»Р°СЃРЅРёС… Р·РЅР°С‡РµРЅСЊ С– РґРѕР·РІРѕР»СЏС”, РґР»СЏ СЃРёРјРµС‚СЂРёС‡РЅРёС… РјР°С‚СЂРёС†СЊ (РЅР°РіР°РґР°С”РјРѕ, С‰Рѕ РјР°С‚СЂРёС†СЏ РЅР°Р·РёРІР°С”С‚СЊСЃСЏ СЃРёРјРµС‚СЂРёС‡РЅРѕСЋ С‚РѕРґС– С– С‚С–Р»СЊРєРё С‚РѕРґС–, РєРѕР»Рё РЈРјРѕРІР° СЃРёРјРµС‚СЂРёС‡РЅРѕСЃС‚С– РјР°С‚СЂРёС†СЊ), РІРёСЂС–С€РёС‚Рё Р·Р°РґР°С‡Сѓ Р·РЅР°С…РѕРґР¶РµРЅРЅСЏ РІСЃС–С… РІР»Р°СЃРЅРёС… Р·РЅР°С‡РµРЅСЊ С‚Р° РІС–РґРїРѕРІС–РґРЅРёС… С—Рј РІР»Р°СЃРЅРёС… РІРµРєС‚РѕСЂС–РІ Р±РµР· РІРёРєРѕСЂРёСЃС‚Р°РЅРЅСЏ С…Р°СЂР°РєС‚РµСЂРёСЃС‚РёС‡РЅРёС… СЂС–РІРЅСЏРЅСЊ.\n",
    "РћСЃРЅРѕРІРЅР° С–РґРµСЏ РјРµС‚РѕРґСѓ РѕР±РµСЂС‚Р°РЅСЊ РїРѕР»СЏРіР°С” РІ РїРµСЂРµС‚РІРѕСЂРµРЅРЅС– РїРѕС‡Р°С‚РєРѕРІРѕС— РјР°С‚СЂРёС†С– РњР°С‚СЂРёС†СЏ Рђ С‚Р°Рє, С‰РѕР± Р·Р±РµСЂС–РіР°СЋС‡Рё СЃРїРµРєС‚СЂ РІР»Р°СЃРЅРёС… Р·РЅР°С‡РµРЅСЊ РѕС‚СЂРёРјР°С‚Рё РґС–Р°РіРѕРЅР°Р»СЊРЅСѓ РјР°С‚СЂРёС†СЋ Р°Р±Рѕ Р±Р»РёР·СЊРєСѓ РґРѕ РЅРµС—.\n",
    "\n",
    "РџРµСЂРµС‚РІРѕСЂРµРЅРЅСЏ Р· С‚Р°РєРёРјРё РІР»Р°СЃС‚РёРІРѕСЃС‚СЏРјРё РІС–РґРѕРјРµ СЏРє РїРµСЂРµС‚РІРѕСЂРµРЅРЅСЏ РїРѕРґС–Р±РЅРѕСЃС‚С– , РґРµ U вЂ” РЅРµРІРёСЂРѕРґР¶РµРЅР° РјР°С‚СЂРёС†СЏ.\n",
    "Р—РЅР°Р№С‚Рё Р±РµР·РїРѕСЃРµСЂРµРґРЅСЊРѕ С‚Р°РєСѓ РјР°С‚СЂРёС†СЋ Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ РјР°С‚СЂРёС†С–, СЏРє РїСЂР°РІРёР»Рѕ, РЅРµРІРґР°С”С‚СЊСЃСЏ, С‚РѕРјСѓ РѕРґРёРЅ С–Р· С€Р»СЏС…С–РІ РїРѕР±СѓРґРѕРІРё РїРµСЂРµС‚РІРѕСЂРµРЅРЅСЏ РїРѕРґС–Р±РЅРѕСЃС‚С– вЂ” С–С‚РµСЂР°С†С–Р№РЅРёР№.\n",
    "РўРѕР±С‚Рѕ, РЅР° РєРѕР¶РЅРѕРјСѓ Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ k-РјСѓ РєСЂРѕС†С– РјРµС‚РѕРґСѓ РѕР±РµСЂС‚Р°РЅСЊ Р·РґС–Р№СЃРЅСЋС”С‚СЊСЃСЏ РїРµСЂРµС‚РІРѕСЂРµРЅРЅСЏРј РїРѕРґС–Р±РЅРѕСЃС‚С–, РґРµ РІРёРєРѕСЂРёСЃС‚РѕРІСѓС”С‚СЊСЃСЏ *РѕСЂС‚РѕРіРѕРЅР°Р»СЊРЅР° РјР°С‚СЂРёС†СЏ* РѕР±РµСЂС‚Р°РЅСЊ $U_{i_k j_k}$($С„_k$)\n",
    "Р¦СЏ РјР°С‚СЂРёС†СЏ Р·Р°Р»РµР¶РёС‚СЊ РІС–Рґ С‚СЂСЊРѕС… РїР°СЂР°РјРµС‚СЂС–РІ $i_k$, $j_k$,$С„_k$ С– РІС–РґСЂС–Р·РЅСЏС”С‚СЊСЃСЏ РІС–Рґ РѕРґРёРЅРёС‡РЅРѕС— Р»РёС€Рµ С‡РѕС‚РёСЂРјР° РµР»РµРјРµРЅС‚Р°РјРё cos($С„_k$),-sin($С„_k$),sin($С„_k$),cos($С„_k$) С–Р· РєРѕРѕСЂРґРёРЅР°С‚Р°РјРё ($i_k$,$i_k$),($i_k$,$j_k$),($j_k$,$i_k$),($j_k$,$j_k$) РІС–РґРїРѕРІС–РґРЅРѕ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1d5e0917-e181-4db9-afd7-075354280124",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Jacobi(A):\n",
    "    # РћС‚СЂРёРјСѓС”РјРѕ СЂРѕР·РјС–СЂ РјР°С‚СЂРёС†С– A\n",
    "    n = A.shape[0]            # РљС–Р»СЊРєС–СЃС‚СЊ СЂСЏРґРєС–РІ (Р°Р±Рѕ СЃС‚РѕРІРїС†С–РІ) Сѓ РєРІР°РґСЂР°С‚РЅС–Р№ РјР°С‚СЂРёС†С– A\n",
    "    \n",
    "    maxit = 100               # РњР°РєСЃРёРјР°Р»СЊРЅРµ С‡РёСЃР»Рѕ С–С‚РµСЂР°С†С–Р№ РґР»СЏ Р°Р»РіРѕСЂРёС‚РјСѓ\n",
    "    eps = 1.0e-15             # РўРѕС‡РЅС–СЃС‚СЊ РґР»СЏ РїРµСЂРµРІС–СЂРєРё РґС–Р°РіРѕРЅР°Р»СЊРЅРѕС— С„РѕСЂРјРё\n",
    "    pi = np.pi                # РљРѕРЅСЃС‚Р°РЅС‚Р° ПЂ\n",
    "    info = 0                  # РџСЂР°РїРѕСЂРµС†СЊ РґР»СЏ РїРѕРІРµСЂРЅРµРЅРЅСЏ СЃС‚Р°С‚СѓСЃСѓ\n",
    "    ev = np.zeros(n, float)   # Р†РЅС–С†С–СЋС”РјРѕ РјР°СЃРёРІ РґР»СЏ РІР»Р°СЃРЅРёС… Р·РЅР°С‡РµРЅСЊ\n",
    "    U = np.zeros((n, n), float) # Р†РЅС–С†С–СЋС”РјРѕ РјР°С‚СЂРёС†СЋ РґР»СЏ РІР»Р°СЃРЅРёС… РІРµРєС‚РѕСЂС–РІ\n",
    "\n",
    "    # Р—Р°РїРѕРІРЅСЋС”РјРѕ РґС–Р°РіРѕРЅР°Р»СЊ РјР°С‚СЂРёС†С– U РѕРґРёРЅРёС†СЏРјРё\n",
    "    for i in range(0, n):\n",
    "        U[i, i] = 1.0\n",
    "\n",
    "    # РћСЃРЅРѕРІРЅРёР№ С†РёРєР» РґР»СЏ С–С‚РµСЂР°С†С–Р№\n",
    "    for t in range(0, maxit):\n",
    "        s = 0  # Р—РјС–РЅРЅР° РґР»СЏ СЂРѕР·СЂР°С…СѓРЅРєСѓ СЃСѓРјРё Р°Р±СЃРѕР»СЋС‚РЅРёС… Р·РЅР°С‡РµРЅСЊ РЅРµРґС–Р°РіРѕРЅР°Р»СЊРЅРёС… РµР»РµРјРµРЅС‚С–РІ\n",
    "        for i in range(0, n):\n",
    "            s += np.sum(np.abs(A[i, (i + 1):n]))  # Р”РѕРґР°С”РјРѕ РЅРµРґС–Р°РіРѕРЅР°Р»СЊРЅС– РµР»РµРјРµРЅС‚Рё\n",
    "\n",
    "        # РџРµСЂРµРІС–СЂРєР°, С‡Рё РґРѕСЃСЏРіРЅСѓС‚Рѕ РґС–Р°РіРѕРЅР°Р»СЊРЅРѕС— С„РѕСЂРјРё\n",
    "        if (s < eps):\n",
    "            info = t  # Р—Р±РµСЂС–РіР°С”РјРѕ РєС–Р»СЊРєС–СЃС‚СЊ С–С‚РµСЂР°С†С–Р№\n",
    "            for i in range(0, n):\n",
    "                ev[i] = A[i, i]  # Р—Р±РµСЂС–РіР°С”РјРѕ РІР»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ\n",
    "            break\n",
    "        else:\n",
    "            # РћР±С‡РёСЃР»СЋС”РјРѕ СЃРµСЂРµРґРЅС” Р·РЅР°С‡РµРЅРЅСЏ РЅРµРґС–Р°РіРѕРЅР°Р»СЊРЅРёС… РµР»РµРјРµРЅС‚С–РІ\n",
    "            limit = s / (n * (n - 1) / 2.0)\n",
    "            # Р¦РёРєР» РґР»СЏ РїРµСЂРµР±РѕСЂСѓ РїР°СЂ (i, j) РјР°С‚СЂРёС†С–\n",
    "            for i in range(0, n - 1):\n",
    "                for j in range(i + 1, n):\n",
    "                    # РџРµСЂРµРІС–СЂСЏС”РјРѕ, С‡Рё |A(i, j)| Р±С–Р»СЊС€Рµ Р·Р° СЃРµСЂРµРґРЅС” Р·РЅР°С‡РµРЅРЅСЏ\n",
    "                    if (np.abs(A[i, j]) > limit):\n",
    "                        denom = A[i, i] - A[j, j]  # Р С–Р·РЅРёС†СЏ РјС–Р¶ РґС–Р°РіРѕРЅР°Р»СЊРЅРёРјРё РµР»РµРјРµРЅС‚Р°РјРё\n",
    "                        \n",
    "                        # РћР±С‡РёСЃР»СЋС”РјРѕ РєСѓС‚ phi РґР»СЏ РѕР±РµСЂС‚Р°РЅРЅСЏ\n",
    "                        if (np.abs(denom) < eps):\n",
    "                            phi = pi / 4  # РЎРїРµС†С–Р°Р»СЊРЅРёР№ РІРёРїР°РґРѕРє, РєРѕР»Рё Р·РЅР°РјРµРЅРЅРёРє Р±Р»РёР·СЊРєРёР№ РґРѕ РЅСѓР»СЏ\n",
    "                        else:\n",
    "                            phi = 0.5 * np.arctan(2.0 * A[i, j] / denom)\n",
    "\n",
    "                        si = np.sin(phi)  # РћР±С‡РёСЃР»СЋС”РјРѕ СЃРёРЅСѓСЃ РєСѓС‚Р° phi\n",
    "                        co = np.cos(phi)  # РћР±С‡РёСЃР»СЋС”РјРѕ РєРѕСЃРёРЅСѓСЃ РєСѓС‚Р° phi\n",
    "\n",
    "                        # РћРЅРѕРІР»СЋС”РјРѕ Р·РЅР°С‡РµРЅРЅСЏ РІ РјР°С‚СЂРёС†С– A\n",
    "                        for k in range(i + 1, j):\n",
    "                            store = A[i, k]\n",
    "                            A[i, k] = A[i, k] * co + A[k, j] * si  \n",
    "                            A[k, j] = A[k, j] * co - store * si   \n",
    "\n",
    "                        for k in range(j + 1, n):\n",
    "                            store = A[i, k]\n",
    "                            A[i, k] = A[i, k] * co + A[j, k] * si   \n",
    "                            A[j, k] = A[j, k] * co - store * si  \n",
    "\n",
    "                        for k in range(0, i):\n",
    "                            store = A[k, i]\n",
    "                            A[k, i] = A[k, i] * co + A[k, j] * si\n",
    "                            A[k, j] = A[k, j] * co - store * si\n",
    "\n",
    "                        # РћРЅРѕРІР»СЋС”РјРѕ РґС–Р°РіРѕРЅР°Р»СЊРЅС– РµР»РµРјРµРЅС‚Рё\n",
    "                        store = A[i, i]\n",
    "                        A[i, i] = A[i, i] * co * co + 2.0 * A[i, j] * co * si + A[j, j] * si * si  \n",
    "                        A[j, j] = A[j, j] * co * co - 2.0 * A[i, j] * co * si + store * si * si  \n",
    "                        A[i, j] = 0.0  # РћС‡РёС‰Р°С”РјРѕ РЅРµРґС–Р°РіРѕРЅР°Р»СЊРЅРёР№ РµР»РµРјРµРЅС‚\n",
    "\n",
    "                        # РћРЅРѕРІР»СЋС”РјРѕ РјР°С‚СЂРёС†СЋ U Р· РІР»Р°СЃРЅРёРјРё РІРµРєС‚РѕСЂР°РјРё\n",
    "                        for k in range(0, n):\n",
    "                            store = U[k, j]\n",
    "                            U[k, j] = U[k, j] * co - U[k, i] * si  \n",
    "                            U[k, i] = U[k, i] * co + store * si  \n",
    "\n",
    "    # РџРѕРІРµСЂС‚Р°С”РјРѕ РІР»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ, РІР»Р°СЃРЅС– РІРµРєС‚РѕСЂРё С– РєС–Р»СЊРєС–СЃС‚СЊ С–С‚РµСЂР°С†С–Р№\n",
    "    info = -t  # РЈ РІРёРїР°РґРєСѓ РЅРµР·Р±С–Р¶РЅРѕСЃС‚С– РІРёРґР°С”С‚СЊСЃСЏ РІС–РґвЂ™С”РјРЅРµ Р·РЅР°С‡РµРЅРЅСЏ \"-t\"\n",
    "    return ev, U, t\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c9131ba6-65b3-47ce-875b-9e74c4b177d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "РњР°С‚СЂРёС†СЏ = \n",
      "[[1.7 2.8 0.3]\n",
      " [2.8 1.2 0.6]\n",
      " [0.3 0.6 1.5]]\n",
      "РњРµС‚РѕРґ РЇРєРѕР±С–: Р§РёСЃР»Рѕ РѕР±РµСЂС‚Р°РЅСЊ = 8\n",
      "Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ = [ 4.39701728 -1.38166347  1.38464619]\n",
      "Р’Р»Р°СЃРЅС– РІРµРєС‚РѕСЂРё = \n",
      "[[ 0.71510642 -0.66548167 -0.21390876]\n",
      " [ 0.66609017  0.74154502 -0.08021764]\n",
      " [ 0.21200634 -0.08511837  0.9735544 ]]\n"
     ]
    }
   ],
   "source": [
    "# Р†РјРїРѕСЂС‚СѓС”РјРѕ Р±С–Р±Р»С–РѕС‚РµРєСѓ numpy РґР»СЏ СЂРѕР±РѕС‚Рё Р· РјР°СЃРёРІР°РјРё\n",
    "import numpy as np\n",
    "\n",
    "# Р—С‡РёС‚СѓС”РјРѕ РјР°С‚СЂРёС†СЋ A (РјРѕР¶РЅР° Р±СѓР»Рѕ Р± Р·С‡РёС‚СѓРІР°С‚Рё Р· С„Р°Р№Р»Сѓ, СЏРєС‰Рѕ РїРѕС‚СЂС–Р±РЅРѕ)\n",
    "A = np.array([[1.7, 2.8, 0.3], \n",
    "              [2.8, 1.2, 0.6], \n",
    "              [0.3, 0.6, 1.5]])\n",
    "\n",
    "# Р’РёРІРѕРґРёРјРѕ РјР°С‚СЂРёС†СЋ A\n",
    "print(\"РњР°С‚СЂРёС†СЏ = \")\n",
    "print(A)\n",
    "\n",
    "# Р’РёРєРѕРЅСѓС”РјРѕ РґС–Р°РіРѕРЅР°Р»С–Р·Р°С†С–СЋ РјР°С‚СЂРёС†С– A Р·Р° РґРѕРїРѕРјРѕРіРѕСЋ РјРµС‚РѕРґСѓ РЇРєРѕР±С–\n",
    "ev, U, t = Jacobi(A)\n",
    "\n",
    "# Р’РёРІРѕРґРёРјРѕ СЂРµР·СѓР»СЊС‚Р°С‚Рё: РєС–Р»СЊРєС–СЃС‚СЊ РѕР±РµСЂС‚Р°РЅСЊ, РІР»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ С– РІР»Р°СЃРЅС– РІРµРєС‚РѕСЂРё\n",
    "print(\"РњРµС‚РѕРґ РЇРєРѕР±С–: Р§РёСЃР»Рѕ РѕР±РµСЂС‚Р°РЅСЊ =\", t)\n",
    "print(\"Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ =\", ev)\n",
    "print(\"Р’Р»Р°СЃРЅС– РІРµРєС‚РѕСЂРё = \")\n",
    "print(U)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45946810-7ff8-466e-ba20-adf140d78a7d",
   "metadata": {},
   "source": [
    "## Р’РёРєРѕСЂРёСЃС‚Р°РЅРЅСЏ С„СѓРЅРєС†С–Р№ NumPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "04dae4b0-b555-4ad3-a3dd-c158ad84e017",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "РњР°С‚СЂРёС†СЏ B:\n",
      " [[ 3 -2]\n",
      " [ 4  1]]\n",
      "Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ:\n",
      " [2.+2.64575131j 2.-2.64575131j]\n",
      "Р’Р»Р°СЃРЅС– РІРµРєС‚РѕСЂРё:\n",
      " [[0.20412415+0.54006172j 0.20412415-0.54006172j]\n",
      " [0.81649658+0.j         0.81649658-0.j        ]]\n",
      "\n",
      "РњР°С‚СЂРёС†СЏ C:\n",
      " [[ 2 -1  1]\n",
      " [-1  3  2]\n",
      " [ 1  2  2]]\n",
      "Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ:\n",
      " [-0.38848975  2.81271627  4.57577347]\n",
      "Р’Р»Р°СЃРЅС– РІРµРєС‚РѕСЂРё:\n",
      " [[-0.50752384 -0.85772795 -0.08198967]\n",
      " [-0.54411439  0.24525898  0.80236373]\n",
      " [ 0.6681011  -0.45183049  0.59117691]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Р’РёР·РЅР°С‡Р°С”РјРѕ РЅРѕРІСѓ РјР°С‚СЂРёС†СЋ Рђ\n",
    "A = np.array([[3, -2], [4, 1]])\n",
    "\n",
    "# РћР±С‡РёСЃР»СЋС”РјРѕ РІР»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ С‚Р° РІР»Р°СЃРЅС– РІРµРєС‚РѕСЂРё РјР°С‚СЂРёС†С– Рђ\n",
    "eigenvalues_A, eigenvectors_A = np.linalg.eig(A)\n",
    "\n",
    "# Р’РёРІРѕРґРёРјРѕ СЂРµР·СѓР»СЊС‚Р°С‚Рё РґР»СЏ РјР°С‚СЂРёС†С– Рђ\n",
    "print(\"РњР°С‚СЂРёС†СЏ B:\\n\", A)\n",
    "print(\"Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ:\\n\", eigenvalues_A)\n",
    "print(\"Р’Р»Р°СЃРЅС– РІРµРєС‚РѕСЂРё:\\n\", eigenvectors_A)\n",
    "\n",
    "# РЇРєС‰Рѕ С‡РёС‚Р°С‚Рё РјР°С‚СЂРёС†СЋ Р· С„Р°Р№Р»Сѓ (РїСЂРёРїСѓСЃС‚РёРјРѕ, С‰Рѕ С„Р°Р№Р» 'A_data.dat' РјС–СЃС‚РёС‚СЊ РєРѕСЂРµРєС‚РЅСѓ РјР°С‚СЂРёС†СЋ)\n",
    "# A = np.loadtxt('A_data.dat')\n",
    "# print(faddeev_leverrier(A))  # РЇРєС‰Рѕ РІРёРєРѕСЂРёСЃС‚РѕРІСѓС”С‚СЊСЃСЏ С„СѓРЅРєС†С–СЏ faddeev_leverrier\n",
    "\n",
    "# Р”Р»СЏ РґРµРјРѕРЅСЃС‚СЂР°С†С–С— РІРёРєРѕСЂРёСЃС‚Р°С”РјРѕ С‰Рµ РѕРґРЅСѓ РјР°С‚СЂРёС†СЋ B\n",
    "B = np.array([[2, -1, 1], [-1, 3, 2], [1, 2, 2]])\n",
    "\n",
    "# РћР±С‡РёСЃР»СЋС”РјРѕ РІР»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ С‚Р° РІР»Р°СЃРЅС– РІРµРєС‚РѕСЂРё РјР°С‚СЂРёС†С– B\n",
    "eigenvalues_B, eigenvectors_B = np.linalg.eig(B)\n",
    "\n",
    "# Р’РёРІРѕРґРёРјРѕ СЂРµР·СѓР»СЊС‚Р°С‚Рё РґР»СЏ РјР°С‚СЂРёС†С– C\n",
    "print(\"\\nРњР°С‚СЂРёС†СЏ C:\\n\", B)\n",
    "print(\"Р’Р»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ:\\n\", eigenvalues_B)\n",
    "print(\"Р’Р»Р°СЃРЅС– РІРµРєС‚РѕСЂРё:\\n\", eigenvectors_B)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfd310b3-ca61-4158-8529-c6ff4025b9fd",
   "metadata": {},
   "source": [
    "## Р’РёСЃРЅРѕРІРѕРє"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4425eb24-7cc7-4aaf-bef7-f067921b2bee",
   "metadata": {},
   "source": [
    "РЈ С†С–Р№ СЂРѕР±РѕС‚С– Р±СѓР»Рѕ СЂРѕР·РіР»СЏРЅСѓС‚Рѕ СЂС–Р·РЅС– РјРµС‚РѕРґРё РґР»СЏ РѕР±С‡РёСЃР»РµРЅРЅСЏ РІР»Р°СЃРЅРёС… Р·РЅР°С‡РµРЅСЊ С‚Р° РІР»Р°СЃРЅРёС… РІРµРєС‚РѕСЂС–РІ РјР°С‚СЂРёС†С–, Р·РѕРєСЂРµРјР° РјРµС‚РѕРґ Р›Р°РІРµСЂ'С”-Р¤Р°РґРґС”С”РІР°, РјРµС‚РѕРґ СЃС‚РµРїРµРЅС–РІ С‚Р° РјРµС‚РѕРґ РѕР±РµСЂС‚Р°РЅСЊ. РљРѕР¶РµРЅ Р· С†РёС… РјРµС‚РѕРґС–РІ РјР°С” СЃРІРѕС— РїРµСЂРµРІР°РіРё С– РЅРµРґРѕР»С–РєРё, Р·Р°Р»РµР¶РЅРѕ РІС–Рґ РІР»Р°СЃС‚РёРІРѕСЃС‚РµР№ РјР°С‚СЂРёС†С– С‚Р° РІРёРјРѕРі РґРѕ С‚РѕС‡РЅРѕСЃС‚С–. Р’РёРєРѕСЂРёСЃС‚Р°РЅРЅСЏ С„СѓРЅРєС†С–Р№ Р±С–Р±Р»С–РѕС‚РµРєРё NumPy СЃСѓС‚С‚С”РІРѕ СЃРїСЂРѕСЃС‚РёР»Рѕ СЂРµР°Р»С–Р·Р°С†С–СЋ С†РёС… РјРµС‚РѕРґС–РІ, Р·Р°Р±РµР·РїРµС‡СѓСЋС‡Рё РІРёСЃРѕРєСѓ РїСЂРѕРґСѓРєС‚РёРІРЅС–СЃС‚СЊ С‚Р° Р·СЂСѓС‡РЅС–СЃС‚СЊ Сѓ РѕР±С‡РёСЃР»РµРЅРЅСЏС…. Р РµР·СѓР»СЊС‚Р°С‚Рё РґРµРјРѕРЅСЃС‚СЂСѓСЋС‚СЊ РµС„РµРєС‚РёРІРЅС–СЃС‚СЊ Р·Р°Р·РЅР°С‡РµРЅРёС… РјРµС‚РѕРґС–РІ Сѓ РїСЂР°РєС‚РёС‡РЅРёС… Р·Р°РґР°С‡Р°С…, РїРѕРІ'СЏР·Р°РЅРёС… С–Р· Р»С–РЅС–Р№РЅРѕСЋ Р°Р»РіРµР±СЂРѕСЋ."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80cd405b-fb70-43a8-b53e-d589a2a70766",
   "metadata": {},
   "source": [
    "## Р”РѕРґР°С‚РєРѕРІРµ Р·Р°РІРґР°РЅРЅСЏ"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a692dbb8-04b2-40ca-9ef8-c4f8e751f1f8",
   "metadata": {},
   "source": [
    "## РњРµС‚РѕРґ РІРµРєС‚РѕСЂС–РІ (РјРµС‚РѕРґСѓ РїРѕС‚СѓР¶РЅРѕСЃС‚РµР№)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "70e9da18-925c-424b-a9d3-cb9f9633ede7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "РќР°Р№Р±С–Р»СЊС€Рµ РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ: 4.999999999313516\n",
      "Р’С–РґРїРѕРІС–РґРЅРёР№ РІР»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: [0.70710678 0.70710678]\n",
      "РќР°СЃС‚СѓРїРЅРµ РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ: 2.000000002028563\n",
      "Р’С–РґРїРѕРІС–РґРЅРёР№ РІР»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ: [ 0.9486833  -0.31622777]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def power_method(A, num_iter=1000, tol=1e-9):\n",
    "    \"\"\"\n",
    "    РњРµС‚РѕРґ РїРѕС‚СѓР¶РЅРѕСЃС‚РµР№ РґР»СЏ Р·РЅР°С…РѕРґР¶РµРЅРЅСЏ РЅР°Р№Р±С–Р»СЊС€РѕРіРѕ РІР»Р°СЃРЅРѕРіРѕ Р·РЅР°С‡РµРЅРЅСЏ С‚Р° РІР»Р°СЃРЅРѕРіРѕ РІРµРєС‚РѕСЂР°.\n",
    "    \n",
    "    Parameters:\n",
    "    A : np.ndarray\n",
    "        РљРІР°РґСЂР°С‚РЅР° РјР°С‚СЂРёС†СЏ.\n",
    "    num_iter : int\n",
    "        РњР°РєСЃРёРјР°Р»СЊРЅР° РєС–Р»СЊРєС–СЃС‚СЊ С–С‚РµСЂР°С†С–Р№.\n",
    "    tol : float\n",
    "        Р”РѕРїСѓСЃС‚РёРјР° С‚РѕС‡РЅС–СЃС‚СЊ.\n",
    "        \n",
    "    Returns:\n",
    "    eigenvalue : float\n",
    "        РќР°Р№Р±С–Р»СЊС€Рµ РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ.\n",
    "    eigenvector : np.ndarray\n",
    "        Р’С–РґРїРѕРІС–РґРЅРёР№ РІР»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ.\n",
    "    \"\"\"\n",
    "    n = A.shape[0]\n",
    "    # Р†РЅС–С†С–Р°Р»С–Р·СѓС”РјРѕ РІРёРїР°РґРєРѕРІРёР№ РІРµРєС‚РѕСЂ\n",
    "    b_k = np.random.rand(n)\n",
    "    \n",
    "    for _ in range(num_iter):\n",
    "        # РћР±С‡РёСЃР»СЋС”РјРѕ РЅР°СЃС‚СѓРїРЅРёР№ РІРµРєС‚РѕСЂ\n",
    "        b_k1 = np.dot(A, b_k)\n",
    "        # РќРѕСЂРјР°Р»С–Р·СѓС”РјРѕ РІРµРєС‚РѕСЂ\n",
    "        b_k1_norm = np.linalg.norm(b_k1)\n",
    "        b_k1 = b_k1 / b_k1_norm\n",
    "        \n",
    "        # РџРµСЂРµРІС–СЂРєР° РЅР° Р·Р±С–Р¶РЅС–СЃС‚СЊ\n",
    "        if np.linalg.norm(b_k1 - b_k) < tol:\n",
    "            break\n",
    "            \n",
    "        b_k = b_k1\n",
    "    \n",
    "    # РћР±С‡РёСЃР»СЋС”РјРѕ РЅР°Р№Р±С–Р»СЊС€Рµ РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ\n",
    "    eigenvalue = np.dot(b_k.T, np.dot(A, b_k)) / np.dot(b_k.T, b_k)\n",
    "    \n",
    "    return eigenvalue, b_k\n",
    "\n",
    "# РџСЂРёРєР»Р°Рґ РІРёРєРѕСЂРёСЃС‚Р°РЅРЅСЏ РјРµС‚РѕРґСѓ РІРµРєС‚РѕСЂС–РІ\n",
    "A = np.array([[4, 1], [2, 3]])\n",
    "eigenvalue, eigenvector = power_method(A)\n",
    "print(\"РќР°Р№Р±С–Р»СЊС€Рµ РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ:\", eigenvalue)\n",
    "print(\"Р’С–РґРїРѕРІС–РґРЅРёР№ РІР»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ:\", eigenvector)\n",
    "\n",
    "# Р”РѕРґР°С‚РєРѕРІС– РјРµС‚РѕРґРё РґР»СЏ Р·РЅР°С…РѕРґР¶РµРЅРЅСЏ РІР»Р°СЃРЅРёС… Р·РЅР°С‡РµРЅСЊ С– РІРµРєС‚РѕСЂС–РІ\n",
    "def deflation(A, eigenvalue, eigenvector):\n",
    "    \"\"\"\n",
    "    Р’РёРєРѕСЂРёСЃС‚РѕРІСѓС”РјРѕ РґРµС„Р»СЏС†С–СЋ РґР»СЏ Р·РЅР°С…РѕРґР¶РµРЅРЅСЏ С–РЅС€РёС… РІР»Р°СЃРЅРёС… Р·РЅР°С‡РµРЅСЊ С‚Р° РІРµРєС‚РѕСЂС–РІ.\n",
    "    \n",
    "    Parameters:\n",
    "    A : np.ndarray\n",
    "        РљРІР°РґСЂР°С‚РЅР° РјР°С‚СЂРёС†СЏ.\n",
    "    eigenvalue : float\n",
    "        Р’Р»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ, СЏРєРµ РїРѕС‚СЂС–Р±РЅРѕ РІРёРґР°Р»РёС‚Рё.\n",
    "    eigenvector : np.ndarray\n",
    "        Р’Р»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ, РІС–РґРїРѕРІС–РґРЅРёР№ РґРѕ РІР»Р°СЃРЅРѕРіРѕ Р·РЅР°С‡РµРЅРЅСЏ.\n",
    "        \n",
    "    Returns:\n",
    "    A_deflated : np.ndarray\n",
    "        Р—РјРµРЅС€РµРЅР° РјР°С‚СЂРёС†СЏ РїС–СЃР»СЏ РІРёРґР°Р»РµРЅРЅСЏ РІР»Р°СЃРЅРѕРіРѕ Р·РЅР°С‡РµРЅРЅСЏ С‚Р° РІРµРєС‚РѕСЂР°.\n",
    "    \"\"\"\n",
    "    # Р—РјРµРЅС€РµРЅРЅСЏ РјР°С‚СЂРёС†С–\n",
    "    return A - eigenvalue * np.outer(eigenvector, eigenvector)\n",
    "\n",
    "# Р—РЅР°С…РѕРґРёРјРѕ С–РЅС€С– РІР»Р°СЃРЅС– Р·РЅР°С‡РµРЅРЅСЏ С‚Р° РІРµРєС‚РѕСЂРё\n",
    "A_deflated = deflation(A, eigenvalue, eigenvector)\n",
    "eigenvalue2, eigenvector2 = power_method(A_deflated)\n",
    "print(\"РќР°СЃС‚СѓРїРЅРµ РІР»Р°СЃРЅРµ Р·РЅР°С‡РµРЅРЅСЏ:\", eigenvalue2)\n",
    "print(\"Р’С–РґРїРѕРІС–РґРЅРёР№ РІР»Р°СЃРЅРёР№ РІРµРєС‚РѕСЂ:\", eigenvector2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d378faa-57f1-4dac-8643-58f6b82cd0c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
